#!/bin/bash
set -e

echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–Ω–æ–ø–æ–∫ –ø–æ—Ä—è–¥–∫–∞..."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ProfileOrderButtons
BUTTONS_COMPONENT="/root/escort-project/client/src/components/admin/ProfileOrderButtons.tsx"
if [ -f "$BUTTONS_COMPONENT" ]; then
  echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProfileOrderButtons –Ω–∞–π–¥–µ–Ω"
else
  echo "‚ùå –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞—é –µ–≥–æ..."
  mkdir -p "/root/escort-project/client/src/components/admin"
  cat > "$BUTTONS_COMPONENT" << 'END'
import React from 'react';
import { IconButton, Tooltip, Stack } from '@mui/material';
import ArrowUpwardIcon from '@mui/icons-material/ArrowUpward';
import ArrowDownwardIcon from '@mui/icons-material/ArrowDownward';
import { api } from '../../api';

interface ProfileOrderButtonsProps {
  profileId: number;
  onSuccess: () => void;
}

const ProfileOrderButtons: React.FC<ProfileOrderButtonsProps> = ({ profileId, onSuccess }) => {
  const handleMoveUp = async () => {
    try {
      console.log("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ—Ä—Ö:", profileId);
      await api.profiles.moveUp(profileId);
      console.log("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–≤–µ—Ä—Ö");
      onSuccess();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ—Ä—Ö:', error);
    }
  };

  const handleMoveDown = async () => {
    try {
      console.log("–ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–Ω–∏–∑:", profileId);
      await api.profiles.moveDown(profileId);
      console.log("–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–º–µ—â–µ–Ω –≤–Ω–∏–∑");
      onSuccess();
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–Ω–∏–∑:', error);
    }
  };

  return (
    <Stack direction="row" spacing={1} justifyContent="center">
      <Tooltip title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã—à–µ">
        <IconButton
          size="small"
          color="primary"
          onClick={handleMoveUp}
          aria-label="–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö"
        >
          <ArrowUpwardIcon />
        </IconButton>
      </Tooltip>
      <Tooltip title="–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∏–∂–µ">
        <IconButton
          size="small"
          color="primary"
          onClick={handleMoveDown}
          aria-label="–ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑"
        >
          <ArrowDownwardIcon />
        </IconButton>
      </Tooltip>
    </Stack>
  );
};

export default ProfileOrderButtons;
END
  echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProfileOrderButtons —Å–æ–∑–¥–∞–Ω"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º API –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é API –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π..."
API_FILE="/root/escort-project/client/src/api/index.ts"
if grep -q "moveUp.*moveDown" "$API_FILE"; then
  echo "‚úÖ API —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã moveUp –∏ moveDown"
else
  echo "‚ùå API –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç –º–µ—Ç–æ–¥—ã moveUp –∏ moveDown, –¥–æ–±–∞–≤–ª—è—é –∏—Ö..."
  cp "$API_FILE" "${API_FILE}.bak_order"
  
  # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã moveUp –∏ moveDown –≤ –æ–±—ä–µ–∫—Ç profiles
  if grep -q "const profiles = {" "$API_FILE"; then
    sed -i '/const profiles = {/a \
  moveUp: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/moveUp`),\
  moveDown: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/moveDown`),\
' "$API_FILE"
    echo "‚úÖ –ú–µ—Ç–æ–¥—ã moveUp –∏ moveDown –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ API"
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –æ–±—ä–µ–∫—Ç profiles –≤ API, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–∞"
  fi
fi

# –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—É Dashboard
echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é DashboardPage.tsx..."
DASHBOARD_PAGE="/root/escort-project/client/src/pages/admin/DashboardPage.tsx"
if [ -f "$DASHBOARD_PAGE" ]; then
  cp "$DASHBOARD_PAGE" "${DASHBOARD_PAGE}.bak_buttons"
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç ProfileOrderButtons
  if grep -q "import ProfileOrderButtons" "$DASHBOARD_PAGE"; then
    echo "‚úÖ –ö–æ–º–ø–æ–Ω–µ–Ω—Ç ProfileOrderButtons —É–∂–µ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω"
  else
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
    sed -i '1s/^/import ProfileOrderButtons from "..\/..\/components\/admin\/ProfileOrderButtons";\n/' "$DASHBOARD_PAGE"
    echo "‚úÖ –ò–º–ø–æ—Ä—Ç ProfileOrderButtons –¥–æ–±–∞–≤–ª–µ–Ω"
  fi
  
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∫–Ω–æ–ø–æ–∫ –≤ —Ç–∞–±–ª–∏—Ü–µ
  if grep -q "ProfileOrderButtons" "$DASHBOARD_PAGE"; then
    echo "‚úÖ –ö–Ω–æ–ø–∫–∏ —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —Ç–∞–±–ª–∏—Ü—É"
  else
    # –ó–∞–º–µ–Ω—è–µ–º DashboardPage –ø–æ–ª–Ω–æ—Å—Ç—å—é, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
    cat > "$DASHBOARD_PAGE" << 'END'
import ProfileOrderButtons from "../../components/admin/ProfileOrderButtons";
import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  IconButton,
  Box,
  CircularProgress,
  Alert,
  Tooltip
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import { api } from '../../api';
import { Profile } from '../../types';
import { useNavigate } from 'react-router-dom';

const DashboardPage: React.FC = () => {
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    fetchProfiles();
  }, []);

  const fetchProfiles = async () => {
    try {
      setLoading(true);
      const response = await api.profiles.getAll();
      setProfiles(response.data);
      setError('');
    } catch (err) {
      console.error('Error fetching profiles:', err);
      setError('Failed to load profiles');
    } finally {
      setLoading(false);
    }
  };

  const handleAddProfile = () => {
    navigate('/admin/profiles/new');
  };

  const handleEditProfile = (id: number) => {
    navigate(`/admin/profiles/edit/${id}`);
  };

  const handleDeleteProfile = async (id: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?')) {
      try {
        await api.profiles.delete(id);
        setProfiles(profiles.filter(profile => profile.id !== id));
      } catch (err) {
        console.error('Error deleting profile:', err);
        setError('Failed to delete profile');
      }
    }
  };

  const handleProfileVerify = async (id: number) => {
    try {
      await api.profiles.verify(id);
      fetchProfiles(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    } catch (err) {
      console.error('Error verifying profile:', err);
      setError('Failed to verify profile');
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="80vh">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography component="h2" variant="h6" color="primary" gutterBottom>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
              </Typography>
              <Button 
                variant="contained" 
                color="primary" 
                startIcon={<AddIcon />}
                onClick={handleAddProfile}
              >
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
              </Button>
            </Box>
            
            {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
            
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>–ò–º—è</TableCell>
                    <TableCell>–ì–æ—Ä–æ–¥</TableCell>
                    <TableCell>–í–æ–∑—Ä–∞—Å—Ç</TableCell>
                    <TableCell>–¶–µ–Ω–∞ (1 —á–∞—Å)</TableCell>
                    <TableCell>–ê–∫—Ç–∏–≤–µ–Ω</TableCell>
                    <TableCell>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</TableCell>
                    <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                    <TableCell align="center">–ü–æ—Ä—è–¥–æ–∫</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {profiles.map((profile) => (
                    <TableRow key={profile.id}>
                      <TableCell>{profile.id}</TableCell>
                      <TableCell>{profile.name}</TableCell>
                      <TableCell>{profile.city?.name || '-'}</TableCell>
                      <TableCell>{profile.age}</TableCell>
                      <TableCell>{profile.price1Hour}</TableCell>
                      <TableCell>{profile.isActive ? '–î–∞' : '–ù–µ—Ç'}</TableCell>
                      <TableCell>
                        {profile.isVerified ? (
                          <CheckCircleIcon color="success" />
                        ) : (
                          <IconButton 
                            size="small" 
                            color="primary"
                            onClick={() => handleProfileVerify(profile.id)}
                          >
                            <Tooltip title="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å">
                              <CheckCircleIcon color="disabled" />
                            </Tooltip>
                          </IconButton>
                        )}
                      </TableCell>
                      <TableCell>
                        <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                          <IconButton
                            size="small"
                            onClick={() => handleEditProfile(profile.id)}
                          >
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => handleDeleteProfile(profile.id)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                      <TableCell align="center">
                        <ProfileOrderButtons
                          profileId={profile.id}
                          onSuccess={fetchProfiles}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );
};

export default DashboardPage;
END
    echo "‚úÖ –°—Ç—Ä–∞–Ω–∏—Ü–∞ Dashboard –ø–æ–ª–Ω–æ—Å—Ç—å—é –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º –∫–Ω–æ–ø–æ–∫ –ø–æ—Ä—è–¥–∫–∞"
  fi
else
  echo "‚ùå –§–∞–π–ª DashboardPage.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞—é –Ω–æ–≤—ã–π —Ñ–∞–π–ª..."
  mkdir -p "/root/escort-project/client/src/pages/admin"
  cat > "$DASHBOARD_PAGE" << 'END'
import ProfileOrderButtons from "../../components/admin/ProfileOrderButtons";
import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  Paper,
  Typography,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Button,
  IconButton,
  Box,
  CircularProgress,
  Alert,
  Tooltip
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import { api } from '../../api';
import { Profile } from '../../types';
import { useNavigate } from 'react-router-dom';

const DashboardPage: React.FC = () => {
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    fetchProfiles();
  }, []);

  const fetchProfiles = async () => {
    try {
      setLoading(true);
      const response = await api.profiles.getAll();
      setProfiles(response.data);
      setError('');
    } catch (err) {
      console.error('Error fetching profiles:', err);
      setError('Failed to load profiles');
    } finally {
      setLoading(false);
    }
  };

  const handleAddProfile = () => {
    navigate('/admin/profiles/new');
  };

  const handleEditProfile = (id: number) => {
    navigate(`/admin/profiles/edit/${id}`);
  };

  const handleDeleteProfile = async (id: number) => {
    if (window.confirm('–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?')) {
      try {
        await api.profiles.delete(id);
        setProfiles(profiles.filter(profile => profile.id !== id));
      } catch (err) {
        console.error('Error deleting profile:', err);
        setError('Failed to delete profile');
      }
    }
  };

  const handleProfileVerify = async (id: number) => {
    try {
      await api.profiles.verify(id);
      fetchProfiles(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–æ—Ñ–∏–ª–∏ –ø–æ—Å–ª–µ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
    } catch (err) {
      console.error('Error verifying profile:', err);
      setError('Failed to verify profile');
    }
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="80vh">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography component="h2" variant="h6" color="primary" gutterBottom>
                –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è–º–∏
              </Typography>
              <Button 
                variant="contained" 
                color="primary" 
                startIcon={<AddIcon />}
                onClick={handleAddProfile}
              >
                –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
              </Button>
            </Box>
            
            {error && <Alert severity="error" sx={{ mb: 2 }}>{error}</Alert>}
            
            <TableContainer>
              <Table size="small">
                <TableHead>
                  <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>–ò–º—è</TableCell>
                    <TableCell>–ì–æ—Ä–æ–¥</TableCell>
                    <TableCell>–í–æ–∑—Ä–∞—Å—Ç</TableCell>
                    <TableCell>–¶–µ–Ω–∞ (1 —á–∞—Å)</TableCell>
                    <TableCell>–ê–∫—Ç–∏–≤–µ–Ω</TableCell>
                    <TableCell>–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω</TableCell>
                    <TableCell>–î–µ–π—Å—Ç–≤–∏—è</TableCell>
                    <TableCell align="center">–ü–æ—Ä—è–¥–æ–∫</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {profiles.map((profile) => (
                    <TableRow key={profile.id}>
                      <TableCell>{profile.id}</TableCell>
                      <TableCell>{profile.name}</TableCell>
                      <TableCell>{profile.city?.name || '-'}</TableCell>
                      <TableCell>{profile.age}</TableCell>
                      <TableCell>{profile.price1Hour}</TableCell>
                      <TableCell>{profile.isActive ? '–î–∞' : '–ù–µ—Ç'}</TableCell>
                      <TableCell>
                        {profile.isVerified ? (
                          <CheckCircleIcon color="success" />
                        ) : (
                          <IconButton 
                            size="small" 
                            color="primary"
                            onClick={() => handleProfileVerify(profile.id)}
                          >
                            <Tooltip title="–í–µ—Ä–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞—Ç—å">
                              <CheckCircleIcon color="disabled" />
                            </Tooltip>
                          </IconButton>
                        )}
                      </TableCell>
                      <TableCell>
                        <Tooltip title="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å">
                          <IconButton
                            size="small"
                            onClick={() => handleEditProfile(profile.id)}
                          >
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="–£–¥–∞–ª–∏—Ç—å">
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => handleDeleteProfile(profile.id)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                      <TableCell align="center">
                        <ProfileOrderButtons
                          profileId={profile.id}
                          onSuccess={fetchProfiles}
                        />
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>
      </Grid>
    </Container>
  );
};

export default DashboardPage;
END
  echo "‚úÖ –°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª DashboardPage.tsx —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ—Ä—è–¥–∫–∞"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é
echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é –¥–ª—è Dashboard..."
APP_ROUTER="/root/escort-project/client/src/App.tsx"
if [ -f "$APP_ROUTER" ]; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Dashboard
  if grep -q "/admin/dashboard" "$APP_ROUTER"; then
    echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è Dashboard —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
  else
    echo "‚ùå –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è Dashboard –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è—é..."
    cp "$APP_ROUTER" "${APP_ROUTER}.bak_route"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –ª–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç DashboardPage
    if ! grep -q "import DashboardPage" "$APP_ROUTER"; then
      sed -i '1s|^|import DashboardPage from "./pages/admin/DashboardPage";\n|' "$APP_ROUTER"
    fi
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç –¥–ª—è Dashboard
    if grep -q "/admin/login" "$APP_ROUTER"; then
      sed -i 's|<Route path="/admin/login"|<Route path="/admin/dashboard" element={<DashboardPage />} />\n          <Route path="/admin/login"|' "$APP_ROUTER"
    else
      echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ Dashboard"
      echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤—Ä—É—á–Ω—É—é: <Route path=\"/admin/dashboard\" element={<DashboardPage />} />"
    fi
    
    echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è Dashboard –¥–æ–±–∞–≤–ª–µ–Ω"
  fi
else
  echo "‚ùå –§–∞–π–ª App.tsx –Ω–µ –Ω–∞–π–¥–µ–Ω! –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏—é"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ
echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ..."
PROFILE_CONTROLLER="/root/escort-project/server/src/controllers/profileController.ts"
if [ -f "$PROFILE_CONTROLLER" ]; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–µ—Ç–æ–¥–æ–≤ moveProfileUp –∏ moveProfileDown
  if grep -q "moveProfileUp\|moveProfileDown" "$PROFILE_CONTROLLER"; then
    echo "‚úÖ –ú–µ—Ç–æ–¥—ã moveProfileUp –∏ moveProfileDown —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ"
  else
    echo "‚ùå –ú–µ—Ç–æ–¥—ã –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è—é..."
    cp "$PROFILE_CONTROLLER" "${PROFILE_CONTROLLER}.bak_order"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–æ–¥—ã –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
    cat >> "$PROFILE_CONTROLLER" << 'END'

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ—Ä—Ö –ø–æ –ø–æ—Ä—è–¥–∫—É (—É–º–µ–Ω—å—à–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è order)
export const moveProfileUp = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const profileId = Number(id);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    const currentProfile = await prisma.profile.findUnique({
      where: { id: profileId },
    });
    
    if (!currentProfile) {
      return res.status(404).json({ error: 'Profile not found' });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å —Å –º–µ–Ω—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º order (–∫–æ—Ç–æ—Ä—ã–π –≤—ã—à–µ –≤ —Å–ø–∏—Å–∫–µ)
    const prevProfile = await prisma.profile.findFirst({
      where: {
        cityId: currentProfile.cityId,
        order: { lt: currentProfile.order || 0 },
      },
      orderBy: {
        order: 'desc',
      },
    });
    
    if (!prevProfile) {
      return res.status(200).json({ 
        message: 'Profile is already at the top',
        profile: currentProfile
      });
    }
    
    // –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    await prisma.$transaction([
      prisma.profile.update({
        where: { id: profileId },
        data: { order: prevProfile.order },
      }),
      prisma.profile.update({
        where: { id: prevProfile.id },
        data: { order: currentProfile.order },
      }),
    ]);
    
    return res.status(200).json({ 
      message: 'Profile moved up successfully',
      profile: await prisma.profile.findUnique({
        where: { id: profileId },
      })
    });
  } catch (error) {
    console.error('Error moving profile up:', error);
    return res.status(500).json({ error: 'Failed to move profile up' });
  }
};

// –ü–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤–Ω–∏–∑ –ø–æ –ø–æ—Ä—è–¥–∫—É (—É–≤–µ–ª–∏—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è order)
export const moveProfileDown = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const profileId = Number(id);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    const currentProfile = await prisma.profile.findUnique({
      where: { id: profileId },
    });
    
    if (!currentProfile) {
      return res.status(404).json({ error: 'Profile not found' });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å —Å –±–æ–ª—å—à–∏–º –∑–Ω–∞—á–µ–Ω–∏–µ–º order (–∫–æ—Ç–æ—Ä—ã–π –Ω–∏–∂–µ –≤ —Å–ø–∏—Å–∫–µ)
    const nextProfile = await prisma.profile.findFirst({
      where: {
        cityId: currentProfile.cityId,
        order: { gt: currentProfile.order || 0 },
      },
      orderBy: {
        order: 'asc',
      },
    });
    
    if (!nextProfile) {
      return res.status(200).json({ 
        message: 'Profile is already at the bottom',
        profile: currentProfile
      });
    }
    
    // –ú–µ–Ω—è–µ–º –ø–æ—Ä—è–¥–æ–∫
    await prisma.$transaction([
      prisma.profile.update({
        where: { id: profileId },
        data: { order: nextProfile.order },
      }),
      prisma.profile.update({
        where: { id: nextProfile.id },
        data: { order: currentProfile.order },
      }),
    ]);
    
    return res.status(200).json({ 
      message: 'Profile moved down successfully',
      profile: await prisma.profile.findUnique({
        where: { id: profileId },
      })
    });
  } catch (error) {
    console.error('Error moving profile down:', error);
    return res.status(500).json({ error: 'Failed to move profile down' });
  }
};
END
    echo "‚úÖ –ú–µ—Ç–æ–¥—ã moveProfileUp –∏ moveProfileDown –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä"
  fi
else
  echo "‚ùå –§–∞–π–ª profileController.ts –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
echo "üîç –ü—Ä–æ–≤–µ—Ä—è—é –º–∞—Ä—à—Ä—É—Ç—ã API –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π..."
SERVER_INDEX="/root/escort-project/server/src/index.ts"
if [ -f "$SERVER_INDEX" ]; then
  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –¥–ª—è –º–µ—Ç–æ–¥–æ–≤ moveProfileUp –∏ moveProfileDown
  if grep -q "moveProfileUp\|moveProfileDown\|move-up\|move-down" "$SERVER_INDEX"; then
    echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —É–∂–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
  else
    echo "‚ùå –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è—é..."
    cp "$SERVER_INDEX" "${SERVER_INDEX}.bak_routes"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π
    # –ò—â–µ–º –±–ª–æ–∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã—Ö –º–∞—Ä—à—Ä—É—Ç–æ–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if grep -q "app.patch('/api/admin/profiles/:id/verify'" "$SERVER_INDEX"; then
      sed -i '/app.patch.\/api\/admin\/profiles\/:id\/verify/a \
app.patch(\'/api\/admin\/profiles\/:id\/moveUp\', profileController.moveProfileUp);\
app.patch(\'/api\/admin\/profiles\/:id\/moveDown\', profileController.moveProfileDown);' "$SERVER_INDEX"
      echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã"
    else
      echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤"
      echo "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –º–∞—Ä—à—Ä—É—Ç—ã –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ —Å—Ç—Ä–æ–∫–∏ —Å app.patch('/api/admin/profiles/:id/verify')"
    fi
  fi
else
  echo "‚ùå –§–∞–π–ª index.ts –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

echo "üöÄ –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–µ–∫—Ç..."
cd /root/escort-project
docker-compose restart server
cd /root/escort-project/client
export CI=false
export DISABLE_ESLINT_PLUGIN=true
export SKIP_PREFLIGHT_CHECK=true

# –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±–æ—Ä–∫—É
npm run build:ignore

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª–∞ –ª–∏ —Å–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build
if [ -d "build" ]; then
  echo "üì¶ –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –∫–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã..."
  # –ö–æ–ø–∏—Ä—É–µ–º —Å–±–æ—Ä–∫—É –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
  docker cp /root/escort-project/client/build/. escort-client:/usr/share/nginx/html/

  # –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º Nginx
  docker exec escort-client nginx -s reload
  
  echo "‚úÖ –°–±–æ—Ä–∫–∞ —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∞ –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∏ Nginx –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"
else
  echo "‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build –Ω–µ —Å–æ–∑–¥–∞–Ω–∞. –°–±–æ—Ä–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å!"
fi

echo "‚úÖ –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ—Ä—è–¥–∫–æ–º –ø—Ä–æ—Ñ–∏–ª–µ–π –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!"
echo "üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ: https://eskortvsegorodarfreal.site/admin/dashboard"
echo "üí° –ù–µ –∑–∞–±—É–¥—å—Ç–µ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É –ø–µ—Ä–µ–¥ –ø—Ä–æ–≤–µ—Ä–∫–æ–π –∫–Ω–æ–ø–æ–∫"
