const { PrismaClient } = require('@prisma/client');
const slugify = require('slugify');

const prisma = new PrismaClient();

/**
 * –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Å—Ç–∞—Ä–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã (cityId –≤ Profile) –≤ –Ω–æ–≤—É—é (ProfilesOnCities)
 */
async function migrateCityData() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Å–≤—è–∑–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –≥–æ—Ä–æ–¥–∞–º–∏...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –ø—Ä–æ—Ñ–∏–ª–∏
    const profiles = await prisma.profile.findMany();
    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${profiles.length} –ø—Ä–æ—Ñ–∏–ª–µ–π`);

    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —Å –µ–≥–æ cityId
    let success = 0;
    let failed = 0;

    for (const profile of profiles) {
      try {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥ —Å —Ç–∞–∫–∏–º cityId
        if (!profile.cityId) {
          console.log(`‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å ${profile.id} –Ω–µ –∏–º–µ–µ—Ç cityId, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º`);
          continue;
        }

        const city = await prisma.city.findUnique({
          where: { id: profile.cityId }
        });

        if (!city) {
          console.log(`‚ö†Ô∏è –î–ª—è –ø—Ä–æ—Ñ–∏–ª—è ${profile.id} –Ω–µ –Ω–∞–π–¥–µ–Ω –≥–æ—Ä–æ–¥ —Å id=${profile.cityId}`);
          continue;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ —Å–≤—è–∑—å
        const existingLink = await prisma.$queryRaw`
          SELECT * FROM "ProfilesOnCities" 
          WHERE "profileId" = ${profile.id} AND "cityId" = ${profile.cityId}
        `;

        if (existingLink && existingLink.length > 0) {
          console.log(`‚ÑπÔ∏è –°–≤—è–∑—å –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª–µ–º ${profile.id} –∏ –≥–æ—Ä–æ–¥–æ–º ${profile.cityId} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç`);
          success++;
          continue;
        }

        // –°–æ–∑–¥–∞–µ–º —Å–≤—è–∑—å —á–µ—Ä–µ–∑ —Å—ã—Ä–æ–π SQL –∑–∞–ø—Ä–æ—Å
        await prisma.$executeRaw`
          INSERT INTO "ProfilesOnCities" ("profileId", "cityId")
          VALUES (${profile.id}, ${profile.cityId})
        `;

        console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ —Å–≤—è–∑—å –º–µ–∂–¥—É –ø—Ä–æ—Ñ–∏–ª–µ–º ${profile.id} –∏ –≥–æ—Ä–æ–¥–æ–º ${profile.cityId}`);
        success++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø—Ä–æ—Ñ–∏–ª—è ${profile.id}:`, error);
        failed++;
      }
    }

    console.log(`‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ - ${success}, –æ—à–∏–±–æ–∫ - ${failed}`);
    return { success, failed };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–≤—è–∑–µ–π –ø—Ä–æ—Ñ–∏–ª–µ–π —Å –≥–æ—Ä–æ–¥–∞–º–∏:', error);
    throw error;
  }
}

/**
 * –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
 */
async function sortCitiesByAlphabet() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É...');

    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞, –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –ø–æ –∏–º–µ–Ω–∏
    const cities = await prisma.city.findMany({
      orderBy: { name: 'asc' }
    });

    console.log(`üìä –ù–∞–π–¥–µ–Ω–æ ${cities.length} –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –≥–æ—Ä–æ–¥–æ–≤ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –∏—Ö –ø–æ–∑–∏—Ü–∏–µ–π –≤ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—Å–∏–≤–µ
    let success = 0;
    let failed = 0;

    for (let i = 0; i < cities.length; i++) {
      try {
        await prisma.$executeRaw`
          UPDATE "City" 
          SET priority = ${i + 1}
          WHERE id = ${cities[i].id}
        `;
        console.log(`‚úÖ –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç ${i + 1} –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${cities[i].name}`);
        success++;
      } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–∞ –¥–ª—è –≥–æ—Ä–æ–¥–∞ ${cities[i].name}:`, error);
        failed++;
      }
    }

    console.log(`‚úÖ –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: —É—Å–ø–µ—à–Ω–æ - ${success}, –æ—à–∏–±–æ–∫ - ${failed}`);
    return { success, failed };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–µ –≥–æ—Ä–æ–¥–æ–≤:', error);
    throw error;
  }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π slug –∏ priority –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
async function updateCitySchema() {
  try {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª–µ slug –≤ —Ç–∞–±–ª–∏—Ü–µ City
    let hasSlugField = false;
    let hasPriorityField = false;
    
    try {
      // –ü—Ä–æ–±—É–µ–º –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–ø—Ä–æ—Å, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä–∏—Ç –Ω–∞–ª–∏—á–∏–µ –ø–æ–ª–µ–π
      await prisma.$queryRaw`SELECT slug FROM "City" LIMIT 1`;
      hasSlugField = true;
      console.log('‚úÖ –ü–æ–ª–µ slug —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ City');
    } catch (error) {
      console.log('‚ùå –ü–æ–ª–µ slug –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ City, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è');
    }
    
    try {
      await prisma.$queryRaw`SELECT priority FROM "City" LIMIT 1`;
      hasPriorityField = true;
      console.log('‚úÖ –ü–æ–ª–µ priority —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ City');
    } catch (error) {
      console.log('‚ùå –ü–æ–ª–µ priority –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ —Ç–∞–±–ª–∏—Ü–µ City, —Ç—Ä–µ–±—É–µ—Ç—Å—è –º–∏–≥—Ä–∞—Ü–∏—è');
    }
    
    // –ï—Å–ª–∏ –æ–±–æ–∏—Ö –ø–æ–ª–µ–π –Ω–µ—Ç, –¥–æ–±–∞–≤–ª—è–µ–º –∏—Ö
    if (!hasSlugField || !hasPriorityField) {
      console.log('üîÑ –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–æ–ª–µ–π...');
      
      if (!hasSlugField) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ slug
        await prisma.$executeRaw`ALTER TABLE "City" ADD COLUMN slug TEXT`;
        console.log('‚úÖ –ü–æ–ª–µ slug –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É City');
      }
      
      if (!hasPriorityField) {
        // –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª–µ priority
        await prisma.$executeRaw`ALTER TABLE "City" ADD COLUMN priority INTEGER DEFAULT 9999`;
        console.log('‚úÖ –ü–æ–ª–µ priority –¥–æ–±–∞–≤–ª–µ–Ω–æ –≤ —Ç–∞–±–ª–∏—Ü—É City');
      }
      
      // –°–æ–∑–¥–∞–µ–º slug –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –≥–æ—Ä–æ–¥–∞
      if (!hasSlugField) {
        await generateCitySlugs();
      }
      
      // –ü–æ—Å–ª–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª–µ–π, –¥–µ–ª–∞–µ–º slug —É–Ω–∏–∫–∞–ª—å–Ω—ã–º
      if (!hasSlugField) {
        await prisma.$executeRaw`ALTER TABLE "City" ALTER COLUMN slug SET NOT NULL`;
        await prisma.$executeRaw`CREATE UNIQUE INDEX "City_slug_key" ON "City"(slug)`;
        console.log('‚úÖ –°–æ–∑–¥–∞–Ω —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ–ª—è slug');
      }
    }
    
    return { hasSlugField, hasPriorityField };
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ö–µ–º—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤:', error);
    throw error;
  }
}

async function main() {
  try {
    console.log('üìù –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö...');

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ö–µ–º—É –¥–ª—è –≥–æ—Ä–æ–¥–∞
    await updateCitySchema();
    
    // –®–∞–≥ 2: –ú–∏–≥—Ä–∞—Ü–∏—è cityId -> cities
    await migrateCityData();

    // –®–∞–≥ 3: –°–æ—Ä—Ç–∏—Ä—É–µ–º –≥–æ—Ä–æ–¥–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
    await sortCitiesByAlphabet();

    console.log('‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
    process.exit(0);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö:', error);
    process.exit(1);
  }
}

main(); 