const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è –æ—à–∏–±–æ–∫
process.env.TSC_COMPILE_ON_ERROR = 'true';
process.env.TS_NODE_TRANSPILE_ONLY = 'true';

console.log('üîÑ –ó–∞–ø—É—Å–∫–∞—é —Å–±–æ—Ä–∫—É —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ TypeScript...');

try {
  // –ü—ã—Ç–∞–µ–º—Å—è –≤—ã–ø–æ–ª–Ω–∏—Ç—å –æ–±—ã—á–Ω—É—é —Å–±–æ—Ä–∫—É, –Ω–æ –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏
  execSync('npx tsc --skipLibCheck', { stdio: 'inherit' });
} catch (error) {
  console.log('‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏ TypeScript, –Ω–æ —Ñ–∞–π–ª—ã –±—ã–ª–∏ —Å–æ–∑–¥–∞–Ω—ã.');
}

// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build
if (!fs.existsSync('./build')) {
  fs.mkdirSync('./build', { recursive: true });
  console.log('üìÅ –°–æ–∑–¥–∞–Ω–∞ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build');
}

// –ö–æ–ø–∏—Ä—É–µ–º TS —Ñ–∞–π–ª—ã –≤ JS —Å –∑–∞–º–µ–Ω–æ–π —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è
function copyTsToJs(dir) {
  const files = fs.readdirSync(dir, { withFileTypes: true });
  
  for (const file of files) {
    const srcPath = path.join(dir, file.name);
    
    if (file.isDirectory()) {
      const targetDir = path.join('./build', path.relative('.', srcPath));
      if (!fs.existsSync(targetDir)) {
        fs.mkdirSync(targetDir, { recursive: true });
      }
      copyTsToJs(srcPath);
    } else if (file.name.endsWith('.ts')) {
      const relativePath = path.relative('.', srcPath);
      const targetPath = path.join('./build', relativePath.replace('.ts', '.js'));
      const targetDir = path.dirname(targetPath);
      
      if (!fs.existsSync(targetDir)) {
        fs.mkdirSync(targetDir, { recursive: true });
      }
      
      // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º TypeScript –≤ JavaScript "–≤—Ä—É—á–Ω—É—é"
      let content = fs.readFileSync(srcPath, 'utf8');
      
      // –£–¥–∞–ª—è–µ–º —Ç–∏–ø—ã TypeScript
      content = content.replace(/: [A-Za-z<>|&[\]]+/g, '');
      content = content.replace(/<[A-Za-z<>|&[\]]+>/g, '');
      content = content.replace(/interface [A-Za-z]+ {[\s\S]*?}/g, '');
      content = content.replace(/type [A-Za-z]+ =[\s\S]*?;/g, '');
      
      fs.writeFileSync(targetPath, content);
      console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª: ${targetPath}`);
    }
  }
}

// –ö–æ–ø–∏—Ä—É–µ–º src –≤ build —Å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ–º TS –≤ JS
copyTsToJs('./src');

console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ TypeScript');
