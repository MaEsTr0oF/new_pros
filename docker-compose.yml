version: "3.8"

services:
  # База данных PostgreSQL
  postgres:
    image: postgres:14-alpine
    container_name: escort-postgres
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1
      POSTGRES_DB: escort_db
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - escort-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Серверная часть (API)
  server:
    build:
      context: ./server
      dockerfile: Dockerfile
    container_name: escort-server
    restart: on-failure:5
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://postgres:1@postgres:5432/escort_db
      - PORT=5001
      - JWT_SECRET=${JWT_SECRET:-your_jwt_secret_key}
      - CLIENT_URL=${CLIENT_URL:-https://eskortvsegorodarfreal.site}
      - API_URL=${API_URL:-https://eskortvsegorodarfreal.site/api}
    ports:
      - "5001:5001"
    networks:
      - escort-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5001/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Клиентская часть (React)
  client:
    build:
      context: ./client
      dockerfile: Dockerfile
    container_name: escort-client
    restart: unless-stopped
    depends_on:
      - server
    environment:
      - REACT_APP_API_URL=${API_URL:-https://eskortvsegorodarfreal.site/api}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx-ssl.conf:/etc/nginx/conf.d/default.conf
      - ./ssl:/etc/nginx/ssl
    networks:
      - escort-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

networks:
  escort-network:
    driver: bridge

volumes:
  postgres_data:
    driver: local
