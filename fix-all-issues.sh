#!/bin/bash
set -e

echo "üîß –ù–∞—á–∏–Ω–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã—Ö –ø—Ä–æ–±–ª–µ–º..."

### 1. –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–ª—è order –≤ —Å—Ö–µ–º–µ Prisma ###
echo "üìä –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å—Ö–µ–º—ã Prisma..."
cat > /tmp/schema.prisma << 'SCHEMA'
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model City {
  id       Int       @id @default(autoincrement())
  name     String    @unique
  profiles Profile[]
}

model Profile {
  id            Int      @id @default(autoincrement())
  name          String
  age           Int
  height        Int
  weight        Int
  breastSize    Int
  phone         String
  description   String
  photos        String[]
  price1Hour    Int
  price2Hours   Int
  priceNight    Int
  priceExpress  Int      @default(0)
  workingHours  String?
  isVerified    Boolean  @default(false)
  hasVideo      Boolean  @default(false)
  hasReviews    Boolean  @default(false)
  services      String[]
  city          City     @relation(fields: [cityId], references: [id])
  cityId        Int
  district      String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  isActive      Boolean  @default(true)
  order         Int      @default(0)

  // Appearance
  nationality   String?
  hairColor     String?
  bikiniZone    String?
  gender        String   @default("female")
  orientation   String   @default("hetero")

  // Location
  inCall        Boolean  @default(true)
  outCall       Boolean  @default(false)

  // Additional filters
  isNonSmoking  Boolean  @default(false)
  isNew         Boolean  @default(true)
  isWaitingCall Boolean  @default(false)
  is24Hours     Boolean  @default(false)

  // Neighbors
  isAlone       Boolean  @default(true)
  withFriend    Boolean  @default(false)
  withFriends   Boolean  @default(false)
}

model Admin {
  id        Int      @id @default(autoincrement())
  username  String   @unique
  password  String
  createdAt DateTime @default(now())
}

model Settings {
  id                  Int      @id @default(autoincrement())
  telegramUsername    String   @default("your_admin_username")
  telegramBotToken    String?
  telegramChatId      String?
  notificationsEnabled Boolean  @default(true)
  autoModeration      Boolean  @default(false)
  defaultCity         String?
  maintenanceMode     Boolean  @default(false)
  watermarkEnabled    Boolean  @default(true)
  watermarkText       String   @default("@your_watermark")
  minPhotoCount       Int      @default(3)
  maxPhotoCount       Int      @default(10)
  defaultPriceHour    Int      @default(5000)
  defaultPriceTwoHours Int     @default(10000)
  defaultPriceNight   Int      @default(30000)
  updatedAt          DateTime @updatedAt
}

model Language {
  id   Int    @id @default(autoincrement())
  code String @unique
  name String
}
SCHEMA

# –ö–æ–ø–∏—Ä—É–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é —Å—Ö–µ–º—É
cp /tmp/schema.prisma /root/escort-project/server/prisma/schema.prisma
echo "‚úÖ –°—Ö–µ–º–∞ Prisma —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∞ (—É–¥–∞–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è order)"

### 2. –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ Prisma –∏—Å–ø–æ–ª—å–∑—É—è Docker ###
echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ Prisma..."
# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —Å–µ—Ä–≤–µ—Ä
if ! docker ps | grep -q escort-server; then
  echo "‚ö†Ô∏è –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä escort-server –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º..."
  cd /root/escort-project
  docker-compose up -d server
  sleep 5
fi

# –ü—Ä–∏–º–µ–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
echo "üîÑ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞..."
docker exec escort-server npx prisma db push --accept-data-loss
echo "‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è Prisma —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω–∞"

### 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ API middleware, –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç ###
echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ API middleware..."
API_MIDDLEWARE_FILE="/root/escort-project/server/src/middleware/api-middleware.ts"
if [ ! -f "$API_MIDDLEWARE_FILE" ]; then
  echo "‚ö†Ô∏è API middleware –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º..."
  mkdir -p /root/escort-project/server/src/middleware
  
  cat > "$API_MIDDLEWARE_FILE" << 'API_MIDDLEWARE'
import express, { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();
const router = express.Router();

// –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–∞–π–æ–Ω–æ–≤ –ø–æ –≥–æ—Ä–æ–¥—É
router.get('/districts/:cityId', async (req: Request, res: Response) => {
  try {
    const cityId = parseInt(req.params.cityId);
    if (isNaN(cityId)) {
      return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –≥–æ—Ä–æ–¥–∞' });
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–∞–π–æ–Ω—ã –∏–∑ –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–∞–Ω–Ω–æ–≥–æ –≥–æ—Ä–æ–¥–∞
    const districts = await prisma.profile.findMany({
      where: {
        cityId: cityId,
        district: {
          not: null
        }
      },
      select: {
        district: true
      },
      distinct: ['district']
    });

    const districtList = districts
      .map(item => item.district)
      .filter(district => district !== null && district !== "")
      .sort((a, b) => a.localeCompare(b, 'ru'));

    res.json(districtList);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–∞–π–æ–Ω–æ–≤:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞–π–æ–Ω—ã' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É—Å–ª—É–≥
router.get('/services', async (_req: Request, res: Response) => {
  try {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥
    const services = [
      'classic', 'anal', 'lesbian', 'group_mmf', 'group_ffm', 'with_toys',
      'in_car', 'blowjob_with_condom', 'blowjob_without_condom', 'deep_blowjob',
      'car_blowjob', 'anilingus_to_client', 'fisting_to_client', 'kisses',
      'light_domination', 'mistress', 'flogging', 'trampling', 'face_sitting',
      'strapon', 'bondage', 'slave', 'role_play', 'foot_fetish', 'golden_rain_out',
      'golden_rain_in', 'copro_out', 'copro_in', 'enema', 'relaxing',
      'professional', 'body_massage', 'lingam_massage', 'four_hands',
      'urological', 'strip_pro', 'strip_amateur', 'belly_dance', 'twerk',
      'lesbian_show', 'sex_chat', 'phone_sex', 'video_sex', 'photo_video',
      'invite_girlfriend', 'invite_friend', 'escort', 'photoshoot', 'skirt'
    ];
    
    res.json(services);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —É—Å–ª—É–≥:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —É—Å–ª—É–≥–∏' });
  }
});

export default router;
API_MIDDLEWARE

  echo "‚úÖ API middleware —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω"
else
  echo "‚úÖ API middleware —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

### 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ index.ts ###
echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–∞—Ä—à—Ä—É—Ç–æ–≤ –≤ index.ts..."
INDEX_FILE="/root/escort-project/server/src/index.ts"
if ! grep -q "moveProfileUp" "$INDEX_FILE"; then
  echo "‚ö†Ô∏è –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º..."
  
  # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –∑–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  LINE_NUM=$(grep -n "app.put('/api/admin/profiles/:id'" "$INDEX_FILE" | cut -d: -f1)
  if [ -z "$LINE_NUM" ]; then
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–æ–≤"
  else
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    sed -i "${LINE_NUM}a app.patch('/api/admin/profiles/:id/move-up', profileController.moveProfileUp);\napp.patch('/api/admin/profiles/:id/move-down', profileController.moveProfileDown);" "$INDEX_FILE"
    echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π –¥–æ–±–∞–≤–ª–µ–Ω—ã"
  fi
else
  echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –∏–º–ø–æ—Ä—Ç middleware
if ! grep -q "apiMiddleware" "$INDEX_FILE"; then
  echo "‚ö†Ô∏è –ò–º–ø–æ—Ä—Ç API middleware –Ω–µ –Ω–∞–π–¥–µ–Ω, –¥–æ–±–∞–≤–ª—è–µ–º..."
  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç middleware –≤ –Ω–∞—á–∞–ª–æ —Ñ–∞–π–ª–∞
  sed -i "1s/^/import apiMiddleware from '.\/middleware\/api-middleware';\n/" "$INDEX_FILE"
  
  # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã middleware
  LINE_NUM=$(grep -n "app.use(express.json" "$INDEX_FILE" | head -1 | cut -d: -f1)
  if [ -z "$LINE_NUM" ]; then
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è middleware"
  else
    # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ middleware –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    sed -i "${LINE_NUM}a // –ü—Ä–∏–º–µ–Ω—è–µ–º API middleware\napp.use('/api', apiMiddleware);" "$INDEX_FILE"
    echo "‚úÖ –ò–º–ø–æ—Ä—Ç –∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ API middleware –¥–æ–±–∞–≤–ª–µ–Ω—ã"
  fi
else
  echo "‚úÖ –ò–º–ø–æ—Ä—Ç API middleware —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

### 5. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –≤ profileController.ts ###
echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ profileController.ts..."
PROFILE_CONTROLLER_FILE="/root/escort-project/server/src/controllers/profileController.ts"
if ! grep -q "moveProfileUp" "$PROFILE_CONTROLLER_FILE"; then
  echo "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏–∏ moveProfileUp –∏ moveProfileDown –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –¥–æ–±–∞–≤–ª—è–µ–º..."
  
  # –î–æ–±–∞–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –∫–æ–Ω–µ—Ü —Ñ–∞–π–ª–∞
  cat >> "$PROFILE_CONTROLLER_FILE" << 'PROFILE_CONTROLLER'

export const moveProfileUp = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const profileId = Number(id);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    const currentProfile = await prisma.profile.findUnique({
      where: { id: profileId }
    });
    
    if (!currentProfile) {
      return res.status(404).json({ error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –≤—ã—à–µ (—Å –º–µ–Ω—å—à–∏–º order)
    const prevProfile = await prisma.profile.findFirst({
      where: {
        cityId: currentProfile.cityId,
        order: {
          lt: currentProfile.order
        }
      },
      orderBy: {
        order: 'desc'
      }
    });
    
    if (!prevProfile) {
      return res.status(200).json({ 
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏',
        profile: currentProfile
      });
    }
    
    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å –ø—Ä–µ–¥—ã–¥—É—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    await prisma.$transaction([
      prisma.profile.update({
        where: { id: profileId },
        data: { order: prevProfile.order }
      }),
      prisma.profile.update({
        where: { id: prevProfile.id },
        data: { order: currentProfile.order }
      })
    ]);
    
    const updatedProfile = await prisma.profile.findUnique({
      where: { id: profileId },
      include: { city: true }
    });
    
    res.json(updatedProfile);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–≤–µ—Ä—Ö:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤–≤–µ—Ä—Ö' });
  }
};

export const moveProfileDown = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const profileId = Number(id);
    
    // –ù–∞—Ö–æ–¥–∏–º —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
    const currentProfile = await prisma.profile.findUnique({
      where: { id: profileId }
    });
    
    if (!currentProfile) {
      return res.status(404).json({ error: '–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –Ω–∏–∂–µ (—Å –±–æ–ª—å—à–∏–º order)
    const nextProfile = await prisma.profile.findFirst({
      where: {
        cityId: currentProfile.cityId,
        order: {
          gt: currentProfile.order
        }
      },
      orderBy: {
        order: 'asc'
      }
    });
    
    if (!nextProfile) {
      return res.status(200).json({ 
        message: '–ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –Ω–∏–∂–Ω–µ–π –ø–æ–∑–∏—Ü–∏–∏',
        profile: currentProfile
      });
    }
    
    // –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ —Å–æ —Å–ª–µ–¥—É—é—â–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º
    await prisma.$transaction([
      prisma.profile.update({
        where: { id: profileId },
        data: { order: nextProfile.order }
      }),
      prisma.profile.update({
        where: { id: nextProfile.id },
        data: { order: currentProfile.order }
      })
    ]);
    
    const updatedProfile = await prisma.profile.findUnique({
      where: { id: profileId },
      include: { city: true }
    });
    
    res.json(updatedProfile);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è –≤–Ω–∏–∑:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –≤–Ω–∏–∑' });
  }
};
PROFILE_CONTROLLER

  echo "‚úÖ –§—É–Ω–∫—Ü–∏–∏ moveProfileUp –∏ moveProfileDown —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã"
else
  echo "‚úÖ –§—É–Ω–∫—Ü–∏–∏ moveProfileUp –∏ moveProfileDown —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

### 6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ cityController.ts –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ ###
echo "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–π –≤ cityController.ts..."
CITY_CONTROLLER_FILE="/root/escort-project/server/src/controllers/cityController.ts"
if ! grep -q "getCitiesPaginated" "$CITY_CONTROLLER_FILE"; then
  echo "‚ö†Ô∏è –§—É–Ω–∫—Ü–∏—è getCitiesPaginated –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –æ–±–Ω–æ–≤–ª—è–µ–º cityController.ts..."
  
  # –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
  cp "$CITY_CONTROLLER_FILE" "${CITY_CONTROLLER_FILE}.bak"
  
  # –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–∞–π–ª
  cat > "$CITY_CONTROLLER_FILE" << 'CITY_CONTROLLER'
import { Request, Response } from 'express';
import { PrismaClient } from '@prisma/client';

const prisma = new PrismaClient();

export const getCities = async (req: Request, res: Response) => {
  try {
    const cities = await prisma.city.findMany({
      orderBy: {
        name: 'asc'  // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –∏–º–µ–Ω–∏ –≤ –ø–æ—Ä—è–¥–∫–µ –≤–æ–∑—Ä–∞—Å—Ç–∞–Ω–∏—è
      }
    });
    res.json(cities);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥–∞' });
  }
};

export const getCitiesPaginated = async (req: Request, res: Response) => {
  try {
    const page = Number(req.query.page) || 1;
    const limit = Number(req.query.limit) || 50;
    const skip = (page - 1) * limit;
    
    const [cities, total] = await prisma.$transaction([
      prisma.city.findMany({
        orderBy: { name: 'asc' },
        skip,
        take: limit
      }),
      prisma.city.count()
    ]);
    
    res.json({
      cities,
      pagination: {
        page,
        limit,
        total,
        pages: Math.ceil(total / limit)
      }
    });
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–æ–≤:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–æ–¥–∞' });
  }
};

export const createCity = async (req: Request, res: Response) => {
  try {
    const city = await prisma.city.create({
      data: req.body,
    });
    res.status(201).json(city);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ä–æ–¥' });
  }
};

export const updateCity = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    const city = await prisma.city.update({
      where: { id: Number(id) },
      data: req.body,
    });
    res.json(city);
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥' });
  }
};

export const deleteCity = async (req: Request, res: Response) => {
  try {
    const { id } = req.params;
    await prisma.city.delete({
      where: { id: Number(id) },
    });
    res.status(204).send();
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≥–æ—Ä–æ–¥–∞:', error);
    res.status(500).json({ error: '–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≥–æ—Ä–æ–¥' });
  }
};
CITY_CONTROLLER

  echo "‚úÖ cityController.ts —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏"
else
  echo "‚úÖ –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç"
fi

### 7. –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≤ –º–∞—Ä—à—Ä—É—Ç—ã ###
echo "üîÑ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ –≤ –º–∞—Ä—à—Ä—É—Ç—ã..."
if ! grep -q "/api/cities/paginated" "$INDEX_FILE"; then
  # –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—Ç–æ, –≥–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã –º–∞—Ä—à—Ä—É—Ç—ã –¥–ª—è –≥–æ—Ä–æ–¥–æ–≤
  LINE_NUM=$(grep -n "app.get('/api/cities'" "$INDEX_FILE" | cut -d: -f1)
  if [ -n "$LINE_NUM" ]; then
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–π –º–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    sed -i "${LINE_NUM}a app.get('/api/cities/paginated', cityController.getCitiesPaginated);" "$INDEX_FILE"
    echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ –¥–æ–±–∞–≤–ª–µ–Ω"
  else
    echo "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –º–µ—Å—Ç–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –º–∞—Ä—à—Ä—É—Ç–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏"
  fi
else
  echo "‚úÖ –ú–∞—Ä—à—Ä—É—Ç –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –≥–æ—Ä–æ–¥–æ–≤ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
fi

### 8. –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π ###
echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π..."
cd /root/escort-project
docker-compose restart server
echo "‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω"

echo ""
echo "‚úÖ –í—Å–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–º–µ–Ω–µ–Ω—ã!"
echo "üìã –ò—Ç–æ–≥–∏:"
echo "  - –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–ª—è order –≤ —Å—Ö–µ–º–µ Prisma"
echo "  - –ü—Ä–∏–º–µ–Ω–µ–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏—è Prisma (—á–µ—Ä–µ–∑ Docker)"
echo "  - –î–æ–±–∞–≤–ª–µ–Ω—ã/–ø—Ä–æ–≤–µ—Ä–µ–Ω—ã —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–µ—Ä–µ–º–µ—â–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–π"
echo "  - –î–æ–±–∞–≤–ª–µ–Ω/–ø—Ä–æ–≤–µ—Ä–µ–Ω API middleware –¥–ª—è —Ä–∞–π–æ–Ω–æ–≤ –∏ —É—Å–ª—É–≥"
echo "  - –û–±–Ω–æ–≤–ª–µ–Ω cityController –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–æ–≤"
echo "  - –î–æ–±–∞–≤–ª–µ–Ω–∞ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏ –¥–ª—è –±–æ–ª–µ–µ 50 –≥–æ—Ä–æ–¥–æ–≤"
echo "  - –°–µ—Ä–≤–µ—Ä –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –≤—Å–µ—Ö –∏–∑–º–µ–Ω–µ–Ω–∏–π"
echo ""
echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://eskortvsegorodarfreal.site"
echo "üîë API –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://eskortvsegorodarfreal.site/api"
echo "üìù –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å –¥–æ—Å—Ç—É–ø–Ω–∞ –ø–æ –∞–¥—Ä–µ—Å—É: https://eskortvsegorodarfreal.site/admin"
echo ""
echo "üí° –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:"
echo "  - –°–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≥–æ—Ä–æ–¥–∞ –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É (—É–∂–µ —Ä–∞–±–æ—Ç–∞–µ—Ç)"
echo "  - –£–ø—Ä–∞–≤–ª—è—Ç—å –ø–æ—Ä—è–¥–∫–æ–º –∞–Ω–∫–µ—Ç —Å –ø–æ–º–æ—â—å—é –Ω–æ–≤—ã—Ö API (moveProfileUp/moveProfileDown)"
echo "  - –ü–æ–ª—É—á–∞—Ç—å –¥–∞–Ω–Ω—ã–µ —Ä–∞–π–æ–Ω–æ–≤ –∏ —É—Å–ª—É–≥ —á–µ—Ä–µ–∑ API middleware"
echo "  - –†–∞–±–æ—Ç–∞—Ç—å —Å –±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –≥–æ—Ä–æ–¥–æ–≤ (–±–æ–ª–µ–µ 50) –∏—Å–ø–æ–ª—å–∑—É—è –ø–∞–≥–∏–Ω–∞—Ü–∏—é"
