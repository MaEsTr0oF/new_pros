{"ast":null,"code":"import axios from'axios';import{API_URL}from'../config';// Создаем базовый инстанс axios\nconst axiosInstance=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Интерцептор для добавления токена авторизации\naxiosInstance.interceptors.request.use(config=>{const token=localStorage.getItem('auth_token');if(token){config.headers.Authorization=`Bearer ${token}`;}return config;},error=>Promise.reject(error));// API для профилей\nconst profiles={getAll:(cityId,filters)=>{const params={};if(cityId)params.cityId=cityId;if(filters)params.filters=JSON.stringify(filters);return axiosInstance.get('/profiles',{params});},getById:id=>axiosInstance.get(`/profiles/${id}`),create:profile=>axiosInstance.post('/admin/profiles',profile),update:(id,profile)=>axiosInstance.put(`/admin/profiles/${id}`,profile),delete:id=>axiosInstance.delete(`/admin/profiles/${id}`),verify:id=>axiosInstance.patch(`/admin/profiles/${id}/verify`),moveUp:id=>axiosInstance.patch(`/admin/profiles/${id}/moveUp`),moveDown:id=>axiosInstance.patch(`/admin/profiles/${id}/moveDown`)};// API для городов\nconst cities={getAll:()=>axiosInstance.get('/cities'),create:city=>axiosInstance.post('/admin/cities',city),update:(id,city)=>axiosInstance.put(`/admin/cities/${id}`,city),delete:id=>axiosInstance.delete(`/admin/cities/${id}`)};// API для авторизации\nconst auth={login:(username,password)=>axiosInstance.post('/auth/login',{username,password}),logout:()=>{localStorage.removeItem('auth_token');localStorage.removeItem('user');},isAuthenticated:()=>!!localStorage.getItem('auth_token')};// API для настроек\nconst settings={getPublic:()=>axiosInstance.get('/settings/public'),getAll:()=>axiosInstance.get('/admin/settings'),update:settings=>axiosInstance.put('/admin/settings',settings)};// API для районов\nconst districts={getByCityId:cityId=>axiosInstance.get(`/districts/${cityId}`)};// API для услуг\nconst services={getAll:()=>axiosInstance.get('/services')};// Создаем гибридный API-объект, который поддерживает оба стиля:\n// 1. Прямые вызовы axios: api.get(), api.post(), api.patch()\n// 2. Объектный доступ: api.profiles.getAll(), api.cities.getAll()\n// Создаем базовый объект и расширяем его методами и свойствами\nconst api=axiosInstance;// Добавляем объектные API\napi.profiles=profiles;api.cities=cities;api.auth=auth;api.settings=settings;api.districts=districts;api.services=services;api.axiosInstance=axiosInstance;export{api};export default api;","map":{"version":3,"names":["axios","API_URL","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","error","Promise","reject","profiles","getAll","cityId","filters","params","JSON","stringify","get","getById","id","profile","post","update","put","delete","verify","patch","moveUp","moveDown","cities","city","auth","login","username","password","logout","removeItem","isAuthenticated","settings","getPublic","districts","getByCityId","services","api"],"sources":["/root/escort-project/client/src/api/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { API_URL } from '../config';\nimport { Profile, City, FilterParams } from '../types';\n\n// Создаем базовый инстанс axios\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Интерцептор для добавления токена авторизации\naxiosInstance.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem('auth_token');\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// API для профилей\nconst profiles = {\n  getAll: (cityId?: number, filters?: FilterParams) => {\n    const params: any = {};\n    if (cityId) params.cityId = cityId;\n    if (filters) params.filters = JSON.stringify(filters);\n    return axiosInstance.get('/profiles', { params });\n  },\n  getById: (id: number) => axiosInstance.get(`/profiles/${id}`),\n  create: (profile: Profile) => axiosInstance.post('/admin/profiles', profile),\n  update: (id: number, profile: Profile) => axiosInstance.put(`/admin/profiles/${id}`, profile),\n  delete: (id: number) => axiosInstance.delete(`/admin/profiles/${id}`),\n  verify: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/verify`),\n  moveUp: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/moveUp`),\n  moveDown: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/moveDown`),\n};\n\n// API для городов\nconst cities = {\n  getAll: () => axiosInstance.get('/cities'),\n  create: (city: City) => axiosInstance.post('/admin/cities', city),\n  update: (id: number, city: City) => axiosInstance.put(`/admin/cities/${id}`, city),\n  delete: (id: number) => axiosInstance.delete(`/admin/cities/${id}`),\n};\n\n// API для авторизации\nconst auth = {\n  login: (username: string, password: string) => \n    axiosInstance.post('/auth/login', { username, password }),\n  logout: () => {\n    localStorage.removeItem('auth_token');\n    localStorage.removeItem('user');\n  },\n  isAuthenticated: () => !!localStorage.getItem('auth_token'),\n};\n\n// API для настроек\nconst settings = {\n  getPublic: () => axiosInstance.get('/settings/public'),\n  getAll: () => axiosInstance.get('/admin/settings'),\n  update: (settings: any) => axiosInstance.put('/admin/settings', settings),\n};\n\n// API для районов\nconst districts = {\n  getByCityId: (cityId: number) => axiosInstance.get(`/districts/${cityId}`),\n};\n\n// API для услуг\nconst services = {\n  getAll: () => axiosInstance.get('/services'),\n};\n\n// Создаем гибридный API-объект, который поддерживает оба стиля:\n// 1. Прямые вызовы axios: api.get(), api.post(), api.patch()\n// 2. Объектный доступ: api.profiles.getAll(), api.cities.getAll()\ninterface ApiType extends AxiosInstance {\n  profiles: typeof profiles;\n  cities: typeof cities;\n  auth: typeof auth;\n  settings: typeof settings;\n  districts: typeof districts;\n  services: typeof services;\n  axiosInstance: AxiosInstance;\n}\n\n// Создаем базовый объект и расширяем его методами и свойствами\nconst api = axiosInstance as ApiType;\n\n// Добавляем объектные API\napi.profiles = profiles;\napi.cities = cities;\napi.auth = auth;\napi.settings = settings;\napi.districts = districts;\napi.services = services;\napi.axiosInstance = axiosInstance;\n\nexport { api };\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}