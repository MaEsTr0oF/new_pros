{"ast":null,"code":"import axios from'axios';import{API_URL}from'../config';// Константы для хранения токена\nconst TOKEN_KEY='auth_token';const USER_KEY='user';// Создаем базовый инстанс axios\nconst axiosInstance=axios.create({baseURL:API_URL,headers:{'Content-Type':'application/json'}});// Интерцептор для добавления токена авторизации\naxiosInstance.interceptors.request.use(config=>{// Проверяем все возможные места хранения токена\nconst token=localStorage.getItem(TOKEN_KEY)||localStorage.getItem('token')||localStorage.getItem('adminToken');if(token){config.headers.Authorization=`Bearer ${token}`;console.log('Добавлен токен авторизации в запрос:',config.url);}else{console.log('Токен авторизации отсутствует для запроса:',config.url);}return config;},error=>Promise.reject(error));// Интерцептор для обработки ошибок авторизации\naxiosInstance.interceptors.response.use(response=>response,error=>{if(error.response&&error.response.status===401){console.log('Ошибка авторизации 401, перенаправление на страницу входа');// При ошибке авторизации перенаправляем на страницу входа\nif(window.location.pathname!=='/login'&&window.location.pathname!=='/admin/login'){window.location.href='/admin/login';}}return Promise.reject(error);});// API для авторизации\nconst auth={login:async(username,password)=>{try{const response=await axiosInstance.post('/auth/login',{username,password});const{token,user}=response.data;// Сохраняем токен во всех возможных форматах для совместимости\nlocalStorage.setItem(TOKEN_KEY,token);localStorage.setItem('token',token);localStorage.setItem('adminToken',token);// Сохраняем данные пользователя\nlocalStorage.setItem(USER_KEY,JSON.stringify(user));console.log('Авторизация успешна, токен сохранен');return response;}catch(error){console.error('Ошибка авторизации:',error);throw error;}},logout:()=>{localStorage.removeItem(TOKEN_KEY);localStorage.removeItem('token');localStorage.removeItem('adminToken');localStorage.removeItem(USER_KEY);console.log('Выход выполнен, токены удалены');window.location.href='/admin/login';},isAuthenticated:()=>{return!!localStorage.getItem(TOKEN_KEY)||!!localStorage.getItem('token')||!!localStorage.getItem('adminToken');},getToken:()=>{return localStorage.getItem(TOKEN_KEY)||localStorage.getItem('token')||localStorage.getItem('adminToken');}};// API для профилей\nconst profiles={moveUp:id=>axiosInstance.patch(`/admin/profiles/${id}/moveUp`),moveDown:id=>axiosInstance.patch(`/admin/profiles/${id}/moveDown`),getAll:(cityId,filters)=>{const params={};if(cityId)params.cityId=cityId;if(filters)params.filters=JSON.stringify(filters);return axiosInstance.get('/admin/profiles',{params});},getById:id=>axiosInstance.get(`/profiles/${id}`),create:profile=>axiosInstance.post('/admin/profiles',profile),update:(id,profile)=>axiosInstance.put(`/admin/profiles/${id}`,profile),delete:id=>axiosInstance.delete(`/admin/profiles/${id}`),verify:id=>axiosInstance.patch(`/admin/profiles/${id}/verify`)};// Остальные API без изменений\n// ...\n// Создаем гибридный API-объект\n// Создаем базовый объект и расширяем его методами и свойствами\nconst api=axiosInstance;// Добавляем объектные API\napi.profiles=profiles;api.auth=auth;// Остальные API\n// ...\nexport{api};export default api;","map":{"version":3,"names":["axios","API_URL","TOKEN_KEY","USER_KEY","axiosInstance","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","console","log","url","error","Promise","reject","response","status","window","location","pathname","href","auth","login","username","password","post","user","data","setItem","JSON","stringify","logout","removeItem","isAuthenticated","getToken","profiles","moveUp","id","patch","moveDown","getAll","cityId","filters","params","get","getById","profile","update","put","delete","verify","api"],"sources":["/root/escort-project/client/src/api/index.ts"],"sourcesContent":["import axios, { AxiosInstance, AxiosRequestConfig, AxiosResponse } from 'axios';\nimport { API_URL } from '../config';\nimport { Profile, City, FilterParams } from '../types';\n\n// Константы для хранения токена\nconst TOKEN_KEY = 'auth_token';\nconst USER_KEY = 'user';\n\n// Создаем базовый инстанс axios\nconst axiosInstance = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Интерцептор для добавления токена авторизации\naxiosInstance.interceptors.request.use(\n  (config) => {\n    // Проверяем все возможные места хранения токена\n    const token = localStorage.getItem(TOKEN_KEY) || \n                 localStorage.getItem('token') || \n                 localStorage.getItem('adminToken');\n    \n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n      console.log('Добавлен токен авторизации в запрос:', config.url);\n    } else {\n      console.log('Токен авторизации отсутствует для запроса:', config.url);\n    }\n    return config;\n  },\n  (error) => Promise.reject(error)\n);\n\n// Интерцептор для обработки ошибок авторизации\naxiosInstance.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response && error.response.status === 401) {\n      console.log('Ошибка авторизации 401, перенаправление на страницу входа');\n      // При ошибке авторизации перенаправляем на страницу входа\n      if (window.location.pathname !== '/login' && window.location.pathname !== '/admin/login') {\n        window.location.href = '/admin/login';\n      }\n    }\n    return Promise.reject(error);\n  }\n);\n\n// API для авторизации\nconst auth = {\n  login: async (username: string, password: string) => {\n    try {\n      const response = await axiosInstance.post('/auth/login', { username, password });\n      const { token, user } = response.data;\n      \n      // Сохраняем токен во всех возможных форматах для совместимости\n      localStorage.setItem(TOKEN_KEY, token);\n      localStorage.setItem('token', token);\n      localStorage.setItem('adminToken', token);\n      \n      // Сохраняем данные пользователя\n      localStorage.setItem(USER_KEY, JSON.stringify(user));\n      \n      console.log('Авторизация успешна, токен сохранен');\n      return response;\n    } catch (error) {\n      console.error('Ошибка авторизации:', error);\n      throw error;\n    }\n  },\n  \n  logout: () => {\n    localStorage.removeItem(TOKEN_KEY);\n    localStorage.removeItem('token');\n    localStorage.removeItem('adminToken');\n    localStorage.removeItem(USER_KEY);\n    console.log('Выход выполнен, токены удалены');\n    window.location.href = '/admin/login';\n  },\n  \n  isAuthenticated: () => {\n    return !!localStorage.getItem(TOKEN_KEY) || \n           !!localStorage.getItem('token') || \n           !!localStorage.getItem('adminToken');\n  },\n  \n  getToken: () => {\n    return localStorage.getItem(TOKEN_KEY) || \n           localStorage.getItem('token') || \n           localStorage.getItem('adminToken');\n  }\n};\n\n// API для профилей\nconst profiles = {\n  moveUp: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/moveUp`),\n  moveDown: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/moveDown`),\n\n  getAll: (cityId?: number, filters?: FilterParams) => {\n    const params: any = {};\n    if (cityId) params.cityId = cityId;\n    if (filters) params.filters = JSON.stringify(filters);\n    return axiosInstance.get('/admin/profiles', { params });\n  },\n  getById: (id: number) => axiosInstance.get(`/profiles/${id}`),\n  create: (profile: Profile) => axiosInstance.post('/admin/profiles', profile),\n  update: (id: number, profile: Profile) => axiosInstance.put(`/admin/profiles/${id}`, profile),\n  delete: (id: number) => axiosInstance.delete(`/admin/profiles/${id}`),\n  verify: (id: number) => axiosInstance.patch(`/admin/profiles/${id}/verify`),\n};\n\n// Остальные API без изменений\n// ...\n\n// Создаем гибридный API-объект\ninterface ApiType extends AxiosInstance {\n  profiles: typeof profiles;\n  auth: typeof auth;\n  // Остальные API\n  // ...\n}\n\n// Создаем базовый объект и расширяем его методами и свойствами\nconst api = axiosInstance as ApiType;\n\n// Добавляем объектные API\napi.profiles = profiles;\napi.auth = auth;\n// Остальные API\n// ...\n\nexport { api };\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}