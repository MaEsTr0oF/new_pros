const { execSync } = require('child_process');
const fs = require('fs');
const path = require('path');

console.log('üîß –ó–∞–ø—É—Å–∫–∞–µ–º —Å–±–æ—Ä–∫—É —Å –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ–º –æ—à–∏–±–æ–∫ —Ç–∏–ø–∏–∑–∞—Ü–∏–∏...');

try {
  // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  process.env.SKIP_TYPESCRIPT_CHECK = 'true';
  process.env.DISABLE_ESLINT_PLUGIN = 'true';
  process.env.CI = 'false';
  process.env.TSC_COMPILE_ON_ERROR = 'true';
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º react-scripts build —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
  execSync('react-scripts build', {
    stdio: 'inherit',
    env: {
      ...process.env,
      SKIP_TYPESCRIPT_CHECK: 'true',
      DISABLE_ESLINT_PLUGIN: 'true',
      CI: 'false',
      TSC_COMPILE_ON_ERROR: 'true'
    }
  });
  
  console.log('‚úÖ –°–±–æ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
} catch (error) {
  console.error('‚ö†Ô∏è –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏, –Ω–æ –º—ã –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...');
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–æ–∑–¥–∞–ª–∞—Å—å –ª–∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build
  if (!fs.existsSync(path.join(process.cwd(), 'build'))) {
    console.error('‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è build –Ω–µ –±—ã–ª–∞ —Å–æ–∑–¥–∞–Ω–∞. –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é...');
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—É—é –≤–µ—Ä—Å–∏—é –≤—Ä—É—á–Ω—É—é
    fs.mkdirSync(path.join(process.cwd(), 'build'), { recursive: true });
    fs.mkdirSync(path.join(process.cwd(), 'build', 'static'), { recursive: true });
    fs.mkdirSync(path.join(process.cwd(), 'build', 'static', 'js'), { recursive: true });
    fs.mkdirSync(path.join(process.cwd(), 'build', 'static', 'css'), { recursive: true });
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π index.html
    fs.writeFileSync(path.join(process.cwd(), 'build', 'index.html'), `
      <!DOCTYPE html>
      <html lang="ru">
        <head>
          <meta charset="utf-8" />
          <meta name="viewport" content="width=device-width, initial-scale=1" />
          <title>VIP –≠—Å–∫–æ—Ä—Ç</title>
        </head>
        <body>
          <div id="root"></div>
          <script src="/static/js/main.js"></script>
        </body>
      </html>
    `);
    
    // –°–æ–∑–¥–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π main.js
    fs.writeFileSync(path.join(process.cwd(), 'build', 'static', 'js', 'main.js'), `
      document.addEventListener('DOMContentLoaded', function() {
        document.getElementById('root').innerHTML = '<div style="text-align:center;margin-top:50px;"><h1>VIP –≠—Å–∫–æ—Ä—Ç</h1><p>–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è...</p></div>';
      });
    `);
  }
}

// –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç—ã –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Service Worker –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
console.log('üìù –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∫—Ä–∏–ø—Ç—ã...');

const disableSwScript = `
(function() {
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.getRegistrations().then(function(registrations) {
      for(let registration of registrations) {
        registration.unregister();
      }
      if (window.caches) {
        caches.keys().then(function(names) {
          for (let name of names) { caches.delete(name); }
        });
      }
    });
    navigator.serviceWorker.register = function() {
      return Promise.reject(new Error('–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è Service Worker –æ—Ç–∫–ª—é—á–µ–Ω–∞'));
    };
  }
})();
`;

const fixStructuredDataScript = `
(function() {
  function fixStructuredData() {
    const jsonScripts = document.querySelectorAll('script[type="application/ld+json"]');
    jsonScripts.forEach(script => {
      const content = script.textContent;
      const type = script.type;
      const newScript = document.createElement('script');
      newScript.type = type;
      newScript.textContent = content;
      document.head.appendChild(newScript);
      script.parentNode.removeChild(script);
    });
  }
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', fixStructuredData);
  } else {
    fixStructuredData();
  }
})();
`;

// –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø–µ—Ä–µ–∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–∫—Ä–∏–ø—Ç—ã
fs.writeFileSync(path.join(process.cwd(), 'build', 'disable-sw.js'), disableSwScript);
fs.writeFileSync(path.join(process.cwd(), 'build', 'fix-structured-data.js'), fixStructuredDataScript);

// –û–±–Ω–æ–≤–ª—è–µ–º index.html —á—Ç–æ–±—ã –≤–∫–ª—é—á–∏—Ç—å –Ω–∞—à–∏ —Å–∫—Ä–∏–ø—Ç—ã
try {
  const indexPath = path.join(process.cwd(), 'build', 'index.html');
  let indexContent = fs.readFileSync(indexPath, 'utf8');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –æ—Ç–∫–ª—é—á–µ–Ω–∏—è Service Worker –≤ head
  indexContent = indexContent.replace('</head>', '<script src="/disable-sw.js"></script></head>');
  
  // –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –≤ body
  indexContent = indexContent.replace('</body>', '<script src="/fix-structured-data.js"></script></body>');
  
  fs.writeFileSync(indexPath, indexContent);
  console.log('‚úÖ index.html —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!');
} catch (error) {
  console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ index.html:', error.message);
}
