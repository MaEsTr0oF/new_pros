import React, { useState, useEffect } from 'react';
import {
  Container,
  Grid,
  Typography,
  Button,
  Dialog,
  TextField,
  MenuItem,
  IconButton,
  Paper,
  Table,
  TableBody,
  TableCell,
  TableContainer,
  TableHead,
  TableRow,
  Tooltip,
  CircularProgress,
  Box,
  Snackbar,
  Alert
} from '@mui/material';
import AddIcon from '@mui/icons-material/Add';
import EditIcon from '@mui/icons-material/Edit';
import DeleteIcon from '@mui/icons-material/Delete';
import CheckCircleIcon from '@mui/icons-material/CheckCircle';
import CancelIcon from '@mui/icons-material/Cancel';
import ProfileEditor from '../../components/admin/ProfileEditor';
import { Profile, City } from '../../types';
import { api } from '../../api';

const ProfilesPage: React.FC = () => {
  const [profiles, setProfiles] = useState<Profile[]>([]);
  const [cities, setCities] = useState<City[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [isEditorOpen, setIsEditorOpen] = useState(false);
  const [selectedProfile, setSelectedProfile] = useState<Profile | null>(null);
  const [snackbar, setSnackbar] = useState({ open: false, message: '', severity: 'success' as 'success' | 'error' });

  useEffect(() => {
    fetchProfiles();
    fetchCities();
  }, []);

  const fetchProfiles = async () => {
    try {
      const response = await api.get('/admin/profiles');
      setProfiles(response.data);
    } catch (error) {
      console.error('Error fetching profiles:', error);
      setError('Failed to fetch profiles');
    } finally {
      setLoading(false);
    }
  };

  const fetchCities = async () => {
    try {
      const response = await api.get('/cities'); 
      setCities(response.data);
    } catch (error) {
      console.error('Error fetching cities:', error);
      setError('Failed to fetch cities');
    }
  };

  const handleOpenEditor = (profile?: Profile) => {
    setSelectedProfile(profile || null);
    setIsEditorOpen(true);
  };

  const handleCloseEditor = () => {
    setIsEditorOpen(false);
    setSelectedProfile(null);
  };

  const handleSaveProfile = async (profileData: Profile) => {
    try {
      if (selectedProfile) {
        await api.put(`/admin/profiles/${selectedProfile.id}`, profileData);
      } else {
        await api.post('/admin/profiles', profileData);
      }
      fetchProfiles();
      setIsEditorOpen(false);
      setSnackbar({
        open: true,
        message: `Profile ${selectedProfile ? 'updated' : 'created'} successfully`,
        severity: 'success'
      });
    } catch (error) {
      console.error('Error saving profile:', error);
      setSnackbar({
        open: true,
        message: `Failed to ${selectedProfile ? 'update' : 'create'} profile`,
        severity: 'error'
      });
    }
  };

  const handleDeleteProfile = async (id: number) => {
    if (!window.confirm('Are you sure you want to delete this profile?')) {
      return;
    }

    try {
      await api.delete(`/admin/profiles/${id}`); 
      fetchProfiles();
      setSnackbar({
        open: true,
        message: 'Profile deleted successfully',
        severity: 'success'
      });
    } catch (error) {
      console.error('Error deleting profile:', error);
      setSnackbar({
        open: true,
        message: 'Failed to delete profile',
        severity: 'error'
      });
    }
  };

  const handleToggleStatus = async (profile: Profile) => {
    try {
      await api.put(`/admin/profiles/${profile.id}`, { isActive: !profile.isActive });
      fetchProfiles();
      setSnackbar({
        open: true,
        message: `Profile ${profile.isActive ? 'deactivated' : 'activated'} successfully`,
        severity: 'success'
      });
    } catch (error) {
      console.error('Error toggling profile status:', error);
      setSnackbar({
        open: true,
        message: 'Failed to update profile status',
        severity: 'error'
      });
    }
  };

  const handleToggleVerification = async (profile: Profile) => {
    try {
      await api.put(`/admin/profiles/${profile.id}`, { isVerified: !profile.isVerified });
      fetchProfiles();
      setSnackbar({
        open: true,
        message: `Profile ${profile.isVerified ? 'unverified' : 'verified'} successfully`,
        severity: 'success'
      });
    } catch (error) {
      console.error('Error toggling profile verification:', error);
      setSnackbar({
        open: true,
        message: 'Failed to update profile verification',
        severity: 'error'
      });
    }
  };

  const handleCloseSnackbar = () => {
    setSnackbar({ ...snackbar, open: false });
  };

  if (loading) {
    return (
      <Box display="flex" justifyContent="center" alignItems="center" minHeight="80vh">
        <CircularProgress />
      </Box>
    );
  }

  return (
    <Container maxWidth="lg" sx={{ mt: 4, mb: 4 }}>
      <Grid container spacing={3}>
        <Grid item xs={12}>
          <Paper sx={{ p: 2, display: 'flex', flexDirection: 'column' }}>
            <Box display="flex" justifyContent="space-between" alignItems="center" mb={2}>
              <Typography variant="h6" component="h2">
                Profile Management
              </Typography>
              <Button
                variant="contained"
                color="primary"
                startIcon={<AddIcon />}
                onClick={() => handleOpenEditor()}
              >
                Add Profile
              </Button>
            </Box>
            
            <TableContainer>
              <Table>
                <TableHead>
                  <TableRow>
                    <TableCell>ID</TableCell>
                    <TableCell>Name</TableCell>
                    <TableCell>City</TableCell>
                    <TableCell>Age</TableCell>
                    <TableCell>Price</TableCell>
                    <TableCell>Status</TableCell>
                    <TableCell>Verified</TableCell>
                    <TableCell>Actions</TableCell>
                  </TableRow>
                </TableHead>
                <TableBody>
                  {profiles.map((profile) => (
                    <TableRow key={profile.id}>
                      <TableCell>{profile.id}</TableCell>
                      <TableCell>{profile.name}</TableCell>
                      <TableCell>{profile.city?.name || 'Unknown'}</TableCell>
                      <TableCell>{profile.age}</TableCell>
                      <TableCell>{profile.price1Hour}</TableCell>
                      <TableCell>
                        <Tooltip title={profile.isActive ? 'Active' : 'Inactive'}>
                          <IconButton
                            size="small"
                            color={profile.isActive ? 'success' : 'error'}
                            onClick={() => handleToggleStatus(profile)}
                          >
                            {profile.isActive ? <CheckCircleIcon /> : <CancelIcon />}
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                      <TableCell>
                        <Tooltip title={profile.isVerified ? 'Verified' : 'Not Verified'}>
                          <IconButton
                            size="small"
                            color={profile.isVerified ? 'success' : 'default'}
                            onClick={() => handleToggleVerification(profile)}
                          >
                            <CheckCircleIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                      <TableCell>
                        <Tooltip title="Edit Profile">
                          <IconButton
                            size="small"
                            color="primary"
                            onClick={() => handleOpenEditor(profile)}
                          >
                            <EditIcon />
                          </IconButton>
                        </Tooltip>
                        <Tooltip title="Delete Profile">
                          <IconButton
                            size="small"
                            color="error"
                            onClick={() => handleDeleteProfile(profile.id)}
                          >
                            <DeleteIcon />
                          </IconButton>
                        </Tooltip>
                      </TableCell>
                    </TableRow>
                  ))}
                </TableBody>
              </Table>
            </TableContainer>
          </Paper>
        </Grid>
      </Grid>

      <Dialog open={isEditorOpen} onClose={handleCloseEditor} maxWidth="md" fullWidth>
        <ProfileEditor
          profile={selectedProfile}
          onSave={handleSaveProfile}
          onClose={handleCloseEditor}
          open={isEditorOpen}
        />
      </Dialog>

      <Snackbar open={snackbar.open} autoHideDuration={6000} onClose={handleCloseSnackbar}>
        <Alert onClose={handleCloseSnackbar} severity={snackbar.severity}>
          {snackbar.message}
        </Alert>
      </Snackbar>
    </Container>
  );
};

export default ProfilesPage;
