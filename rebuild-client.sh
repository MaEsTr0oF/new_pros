#!/bin/bash
set -e

echo "üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–µ—Å–±–æ—Ä–∫—É –∫–ª–∏–µ–Ω—Ç–∞"

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd /root/escort-project

# –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞
echo "üõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–ª–∏–µ–Ω—Ç–∞"
docker-compose stop client
docker-compose rm -f client

# –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –∫–ª–∏–µ–Ω—Ç
echo "üèóÔ∏è –ü–µ—Ä–µ—Å–æ–±–∏—Ä–∞–µ–º –∫–ª–∏–µ–Ω—Ç"
docker-compose build --no-cache client

# –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç
echo "‚úÖ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç"
docker-compose up -d client

# –î–∞–µ–º –≤—Ä–µ–º—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
echo "‚è≥ –û–∂–∏–¥–∞–µ–º –∑–∞–ø—É—Å–∫ –∫–ª–∏–µ–Ω—Ç–∞..."
sleep 10

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è js –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
mkdir -p /usr/share/nginx/html/js

# –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
cat > /root/escort-project/fix-display.js << 'EOFINNER'
(function() {
  console.log('–°–∫—Ä–∏–ø—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–ø—É—â–µ–Ω');
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã—Ö —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
  function removeStructuredDataText() {
    // –ù–∞—Ö–æ–¥–∏–º –∏ —É–¥–∞–ª—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ—Ç–æ–±—Ä–∞–∂–∞—é—Ç—Å—è –∫–∞–∫ —Ç–µ–∫—Å—Ç
    const textNodes = [];
    const walker = document.createTreeWalker(
      document.body,
      NodeFilter.SHOW_TEXT,
      null,
      false
    );
    
    let node;
    while (node = walker.nextNode()) {
      if (node.textContent && 
          node.textContent.includes('@context') && 
          node.textContent.includes('schema.org')) {
        textNodes.push(node);
      }
    }
    
    if (textNodes.length > 0) {
      console.log(`–ù–∞–π–¥–µ–Ω–æ ${textNodes.length} —É–∑–ª–æ–≤ —Å–æ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏`);
      textNodes.forEach(node => {
        node.parentNode.removeChild(node);
      });
      console.log('–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º—ã–µ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã');
    }
  }
  
  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–æ–≤
  function sortCities() {
    const selects = document.querySelectorAll('select');
    
    selects.forEach(select => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤
      if (select.options.length > 2) {
        const options = Array.from(select.options);
        const cityNames = options.map(opt => opt.text.toLowerCase());
        
        if (cityNames.some(name => 
             name.includes('–º–æ—Å–∫–≤–∞') || 
             name.includes('—Å–∞–Ω–∫—Ç') || 
             name.includes('–µ–∫–∞—Ç–µ—Ä'))) {
          
          console.log('–ù–∞–π–¥–µ–Ω –≤—ã–ø–∞–¥–∞—é—â–∏–π —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, —Å–æ—Ä—Ç–∏—Ä—É–µ–º');
          
          // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          const selectedValue = select.value;
          
          // –°–æ—Ä—Ç–∏—Ä—É–µ–º –æ–ø—Ü–∏–∏
          options.sort((a, b) => {
            if (a.value === '' || a.text.includes('–í—ã–±–µ—Ä–∏—Ç–µ')) return -1;
            if (b.value === '' || b.text.includes('–í—ã–±–µ—Ä–∏—Ç–µ')) return 1;
            return a.text.localeCompare(b.text, 'ru');
          });
          
          // –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–ø—Ü–∏–∏
          while (select.options.length > 0) {
            select.remove(0);
          }
          
          // –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏
          options.forEach(option => select.add(option));
          
          // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
          if (selectedValue) {
            select.value = selectedValue;
          }
          
          console.log('–ì–æ—Ä–æ–¥–∞ –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –ø–æ –∞–ª—Ñ–∞–≤–∏—Ç—É');
        }
      }
    });
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
  function init() {
    removeStructuredDataText();
    sortCities();
    
    // –ü–æ–≤—Ç–æ—Ä—è–µ–º —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º–æ–≥–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
    setTimeout(removeStructuredDataText, 1000);
    setTimeout(sortCities, 1000);
    setTimeout(removeStructuredDataText, 3000);
    setTimeout(sortCities, 3000);
  }
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }
  
  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º–∏ DOM
  const observer = new MutationObserver(function() {
    removeStructuredDataText();
    sortCities();
  });
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
})();
EOFINNER

# –ö–æ–ø–∏—Ä—É–µ–º —Å–∫—Ä–∏–ø—Ç –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
docker cp /root/escort-project/fix-display.js escort-client:/usr/share/nginx/html/js/fix-display.js

# –î–æ–±–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–ø—Ç –≤ index.html
docker exec escort-client sh -c "grep -q 'fix-display.js' /usr/share/nginx/html/index.html || sed -i '/<head>/a <script src=\"/js/fix-display.js\"></script>' /usr/share/nginx/html/index.html"

# –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º Nginx
docker exec escort-client nginx -s reload

echo "‚úÖ –ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
echo "üåê –°–∞–π—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: https://eskortvsegorodarfreal.site"
